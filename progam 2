Objective 1: System Health Monitoring Script
This script will monitor CPU usage, memory usage, disk space, and running processes, and log alerts if any of these metrics exceed predefined thresholds.

bash
Copy code
#!/bin/bash

# Thresholds
CPU_THRESHOLD=80
MEMORY_THRESHOLD=80
DISK_THRESHOLD=80
LOG_FILE="/var/log/system_health.log"

# Function to log messages
log_message() {
    local message="$1"
    echo "$(date): $message" >> $LOG_FILE
}

# Check CPU usage
check_cpu() {
    local cpu_usage=$(top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1}')
    if (( $(echo "$cpu_usage > $CPU_THRESHOLD" | bc -l) )); then
        log_message "CPU usage is above threshold: $cpu_usage%"
    fi
}

# Check Memory usage
check_memory() {
    local memory_usage=$(free | grep Mem | awk '{print $3/$2 * 100.0}')
    if (( $(echo "$memory_usage > $MEMORY_THRESHOLD" | bc -l) )); then
        log_message "Memory usage is above threshold: $memory_usage%"
    fi
}

# Check Disk usage
check_disk() {
    local disk_usage=$(df / | grep / | awk '{print $5}' | sed 's/%//g')
    if (( disk_usage > DISK_THRESHOLD )); then
        log_message "Disk usage is above threshold: $disk_usage%"
    fi
}

# Check Running processes
check_processes() {
    local process_count=$(ps aux | wc -l)
    log_message "Currently running processes: $process_count"
}

# Run checks
check_cpu
check_memory
check_disk
check_processes
Objective 2: Automated Backup Solution
This script automates the backup of a specified directory to a remote server using rsync. It logs the success or failure of the operation.

bash
Copy code
#!/bin/bash

# Variables
SOURCE_DIR="/path/to/source"
REMOTE_USER="remote_user"
REMOTE_HOST="remote_host"
REMOTE_DIR="/path/to/remote/backup"
LOG_FILE="/var/log/backup.log"

# Function to log messages
log_message() {
    local message="$1"
    echo "$(date): $message" >> $LOG_FILE
}

# Perform backup using rsync
perform_backup() {
    rsync -avz $SOURCE_DIR ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DIR}
    if [ $? -eq 0 ]; then
        log_message "Backup successful."
    else
        log_message "Backup failed."
    fi
}

# Run the backup
perform_backup
